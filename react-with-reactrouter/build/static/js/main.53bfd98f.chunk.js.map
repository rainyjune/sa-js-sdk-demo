{"version":3,"sources":["components/home.js","components/about.js","components/topics.js","App.js","serviceWorker.js","index.js"],"names":["Home","react_default","a","createElement","className","href","target","rel","About","Topic","_ref","match","params","topicId","Topics","_ref2","react_router_dom","to","concat","url","react_router","path","component","exact","render","sensors","init","server_url","heatmap","BasicExample","App","React","Component","handleLocationChange","location","console","log","pathname","document","title","quick","history","this","props","unsubscribeFromHistory","listen","Boolean","window","hostname","ReactDOM","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.53bfd98f.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport default function Home() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <p>\r\n          Edit <code>src/App.js</code> and save to reload.\r\n        </p>\r\n        <a\r\n          className=\"App-link\"\r\n          href=\"https://reactjs.org\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          Learn React\r\n        </a>\r\n      </header>\r\n    </div>\r\n  );\r\n}","import React from \"react\";\r\n\r\nexport default function About() {\r\n  return (\r\n    <div>\r\n      <h2>About</h2>\r\n    </div>\r\n  );\r\n}","import React from \"react\";\r\nimport { Route, Link } from \"react-router-dom\";\r\n\r\nfunction Topic({ match }) {\r\n  return (\r\n    <div>\r\n      <h3>{match.params.topicId}</h3>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default function Topics({ match }) {\r\n  return (\r\n    <div>\r\n      <h2>Topics</h2>\r\n      <ul>\r\n        <li>\r\n          <Link to={`${match.url}/rendering`}>Rendering with React</Link>\r\n        </li>\r\n        <li>\r\n          <Link to={`${match.url}/components`}>Components</Link>\r\n        </li>\r\n        <li>\r\n          <Link to={`${match.url}/props-v-state`}>Props v. State</Link>\r\n        </li>\r\n      </ul>\r\n\r\n      <Route path={`${match.path}/:topicId`} component={Topic} />\r\n      <Route\r\n        exact\r\n        path={match.path}\r\n        render={() => <h3>Please select a topic.</h3>}\r\n      />\r\n    </div>\r\n  );\r\n};","import React from \"react\";\r\nimport { BrowserRouter, Route, Link } from \"react-router-dom\";\r\n\r\nimport Home from './components/home';\r\nimport About from './components/about';\r\nimport Topics from './components/topics';\r\n\r\nimport './App.css';\r\n\r\n// 引入 SDK\r\nimport sensors from'sa-sdk-javascript';\r\n\r\n// 配置参数\r\nsensors.init({\r\n  server_url: '//test-syg.datasink.sensorsdata.cn/sa?token=27f1e21b78daf376&project=lixiang',\r\n  heatmap: {}\r\n});\r\n\r\nclass BasicExample extends React.Component {\r\n  render() {\r\n    return (\r\n      <BrowserRouter>\r\n        <Route component={App} />\r\n      </BrowserRouter>\r\n    );\r\n  }\r\n}\r\n\r\nclass App extends React.Component {\r\n  componentWillMount() {\r\n    const { history } = this.props;\r\n    this.unsubscribeFromHistory = history.listen(this.handleLocationChange);\r\n    this.handleLocationChange(history.location);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    if (this.unsubscribeFromHistory) this.unsubscribeFromHistory();\r\n  }\r\n\r\n  handleLocationChange = (location) => {\r\n    // 路由变化时执行 sensors.quick(\"autoTrackSinglePage\");\r\n    console.log('changed:', location);\r\n\r\n    // 发送数据之前设置标题\r\n    switch(location.pathname) {\r\n      case \"/topics\":\r\n        document.title = \"Topics\";\r\n        break;\r\n      case \"/about\":\r\n        document.title = \"About\";\r\n        break;\r\n      default:\r\n        document.title = 'Home';\r\n        break;\r\n    }\r\n    sensors.quick(\"autoTrackSinglePage\");\r\n  }\r\n\r\n  render() {\r\n    // Render the rest of the application with its routes\r\n    return (\r\n      <div>\r\n        <ul>\r\n          <li>\r\n            <Link to=\"/\">Home</Link>\r\n          </li>\r\n          <li>\r\n            <Link to=\"/about\">About</Link>\r\n          </li>\r\n          <li>\r\n            <Link to=\"/topics\">Topics</Link>\r\n          </li>\r\n        </ul>\r\n\r\n        <hr />\r\n        <Route exact path=\"/\" component={Home} />\r\n        <Route path=\"/about\" component={About} />\r\n        <Route path=\"/topics\" component={Topics} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\nexport default BasicExample;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}