{"version":3,"sources":["components/home.js","components/about.js","components/topics.js","App.js","serviceWorker.js","index.js"],"names":["Home","react_default","a","createElement","className","href","target","rel","About","Topic","_ref","match","params","topicId","Topics","_ref2","react_router_dom","to","concat","url","react_router","path","component","exact","render","sensors","init","server_url","heatmap","BasicExample","App","React","Component","handleLocationChange","location","console","log","quick","history","this","props","unsubscribeFromHistory","listen","Boolean","window","hostname","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ad9939d5.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default function Home() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}","import React from \"react\";\n\nexport default function About() {\n  return (\n    <div>\n      <h2>About</h2>\n    </div>\n  );\n}","import React from \"react\";\nimport { Route, Link } from \"react-router-dom\";\n\nfunction Topic({ match }) {\n  return (\n    <div>\n      <h3>{match.params.topicId}</h3>\n    </div>\n  );\n}\n\nexport default function Topics({ match }) {\n  return (\n    <div>\n      <h2>Topics</h2>\n      <ul>\n        <li>\n          <Link to={`${match.url}/rendering`}>Rendering with React</Link>\n        </li>\n        <li>\n          <Link to={`${match.url}/components`}>Components</Link>\n        </li>\n        <li>\n          <Link to={`${match.url}/props-v-state`}>Props v. State</Link>\n        </li>\n      </ul>\n\n      <Route path={`${match.path}/:topicId`} component={Topic} />\n      <Route\n        exact\n        path={match.path}\n        render={() => <h3>Please select a topic.</h3>}\n      />\n    </div>\n  );\n};","import React from \"react\";\nimport { BrowserRouter, Route, Link } from \"react-router-dom\";\n\nimport Home from './components/home';\nimport About from './components/about';\nimport Topics from './components/topics';\n\nimport './App.css';\n\n// 引入 SDK\nimport sensors from'sa-sdk-javascript';\n\n// 配置参数\nsensors.init({\n  server_url: '//test-syg.datasink.sensorsdata.cn/sa?token=27f1e21b78daf376&project=lixiang',\n  heatmap: {}\n});\n\nclass BasicExample extends React.Component {\n  render() {\n    return (\n      <BrowserRouter>\n        <Route component={App} />\n      </BrowserRouter>\n    );\n  }\n}\n\nclass App extends React.Component {\n  componentWillMount() {\n    const { history } = this.props;\n    this.unsubscribeFromHistory = history.listen(this.handleLocationChange);\n    this.handleLocationChange(history.location);\n  }\n\n  componentWillUnmount() {\n    if (this.unsubscribeFromHistory) this.unsubscribeFromHistory();\n  }\n\n  handleLocationChange = (location) => {\n    // 路由变化时执行 sensors.quick(\"autoTrackSinglePage\");\n    console.log('changed:', location);\n    sensors.quick(\"autoTrackSinglePage\");\n  }\n\n  render() {\n    // Render the rest of the application with its routes\n    return (\n      <div>\n        <ul>\n          <li>\n            <Link to=\"/\">Home</Link>\n          </li>\n          <li>\n            <Link to=\"/about\">About</Link>\n          </li>\n          <li>\n            <Link to=\"/topics\">Topics</Link>\n          </li>\n        </ul>\n\n        <hr />\n        <Route exact path=\"/\" component={Home} />\n        <Route path=\"/about\" component={About} />\n        <Route path=\"/topics\" component={Topics} />\n      </div>\n    );\n  }\n}\n\n\n\nexport default BasicExample;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}